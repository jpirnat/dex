{% extends "html/base.twig" %}

{% block styles %}
	<link href="/css/vtooltip.css" rel="stylesheet">
{% endblock %}

{% block body %}
{% verbatim %}
<div id="app" v-cloak>
	<dex-breadcrumbs :breadcrumbs="breadcrumbs"></dex-breadcrumbs>

	<div class="version-group-control" v-if="versionGroups.length">
		<ul>
			<li v-for="vg in versionGroups">
				<a :href="'/dex/' + vg.identifier + '/moves/' + move.identifier"
					:class="{
						'current': vg.identifier === versionGroup.identifier
					}"
				>{{ vg.name }}</a>
			</li>
		</ul>
	</div>

	<div v-if="!loaded" class="dex-loader-container">
		<div class="dex-loader"></div>
	</div>

	<template v-if="loaded">
		<h1 v-if="!move.zMoveImage" class="dex-page__title">{{ move.name }}</h1>
		<img v-if="move.zMoveImage" class="dex-page__title--z-move-image" :src="'/images/z-moves/' + move.zMoveImage" :alt="move.name">

		<p class="dex-move__description">{{ move.description }}</p>

		<h2 class="dex-section__title">General Data</h2>
		<div class="dex-move__general">
			<dl class="dex-move__general-main">
				<dt>Type:</dt>
				<dd>
					<dex-type-link
						:vg-identifier="versionGroup.identifier"
						:type="move.type"
					></dex-type-link>
				</dd>

				<dt>Category:</dt>
				<dd>
					<img :src="'/images/categories/' + move.category.icon"
						:alt="move.category.name" v-tooltip="move.category.name"
					>
				</dd>

				<dt>Target:</dt>
				<dd>{{ move.target.name }}</dd>

				<dt>Power:</dt>
				<dd>{{ powerText(move) }}</dd>

				<dt>Accuracy:</dt>
				<dd>{{ accuracyText(move) }}</dd>

				<dt>PP:</dt>
				<dd>{{ move.pp }} (max {{ move.pp * 1.6 }})</dd>

				<dt>Priority:</dt>
				<dd>{{ move.priority }}</dd>
			</dl>

			<div>
				<div v-if="showOtherDetails" class="dex-move__other-details">
					<div>Other Details:</div>
					<ul>
						<li v-if="move.minHits > 0">
							Hits {{ move.minHits }}<template v-if="move.minHits !== move.maxHits">–{{ move.maxHits }}</template> times
						</li>
						<li v-if="move.infliction">
							<template v-if="move.infliction.percent === 0 || move.infliction.percent === 100">
								Inflicts {{ move.infliction.name }}
							</template>
							<template v-else>
								{{ move.infliction.percent }}% chance of inflicting {{ move.infliction.name }}
							</template>
						</li>
						<li v-if="move.minTurns > 0">
							Effect lasts {{ move.minTurns }}<template v-if="move.minTurns !== move.maxTurns">–{{ move.maxTurns }}</template> turns
						</li>
						<li v-if="move.critRate > 0">
							Boosted critical hit rate (+{{ move.critRate }} stage<template v-if="move.critRate > 1">s</template>)
						</li>
						<li v-if="move.flinchPercent > 0">
							{{ move.flinchPercent }}% chance of causing the target to flinch
						</li>
						<li v-if="move.recoilPercent > 0">
							User recovers {{ move.recoilPercent }}% of the damage dealt
						</li>
						<li v-if="move.recoilPercent < 0">
							User takes {{ Math.abs(move.recoilPercent) }}% of the damage dealt as recoil
						</li>
						<li v-if="move.healPercent > 0">
							User recovers {{ move.healPercent }}% of their maximum HP
						</li>
						<li v-if="move.healPercent < 0">
							User loses {{ Math.abs(move.healPercent) }}% of their maximum HP
						</li>
						<li v-for="statChange in statChanges">
							<template v-if="statChange.percent === 0 || statChange.percent === 100">
								<template v-if="statChange.stages > 0">Raises</template>
								<template v-else>Lowers</template>
								{{ statChange.statName }} by {{ Math.abs(statChange.stages) }}
								stage<template v-if="Math.abs(statChange.stages) > 1">s</template>
							</template>
							<template v-else>
								{{ statChange.percent }}% chance of
								<template v-if="statChange.stages > 0">raising</template>
								<template v-else>lowering</template>
								{{ statChange.statName }} by {{ Math.abs(statChange.stages) }}
								stage<template v-if="Math.abs(statChange.stages) > 1">s</template>
							</template>
						</li>
					</ul>
				</div>

				<div v-if="move.zMove" class="dex-move__other-details">
					<div>
						Z-Move:
						<template v-if="move.zMove.identifier !== move.identifier">
							<a :href="'/dex/' + versionGroup.identifier + '/moves/' + move.zMove.identifier" class="dex-link">{{ move.zMove.name }}</a>
						</template>
						<template v-else>{{ move.zMove.name }}</template>
					</div>
					<ul>
						<li v-if="move.zMove.power">Power: {{ move.zMove.power }}</li>
						<li v-if="move.zMove.zPowerEffect">{{ move.zMove.zPowerEffect.name }}</li>
					</ul>
				</div>

				<div v-if="move.maxMove" class="dex-move__other-details">
					<div>
						Max Move:
						<a :href="'/dex/' + versionGroup.identifier + '/moves/' + move.maxMove.identifier" class="dex-link">{{ move.maxMove.name }}</a>
					</div>
					<ul>
						<li v-if="move.maxMove.power">Power: {{ move.maxMove.power }}</li>
					</ul>
				</div>
			</div>
		</div>

		<template v-if="types.length > 0">
			<h2 class="dex-section__title">Matchups</h2>
			<div>
				<h3 class="dex-type__matchups-title">Damage Dealt:</h3>
				<ul class="dex-type__matchups">
					<li v-for="t in types" :key="t.identifier"
						class="dex-type__matchup" :class="{
							'dex-type__matchup--fade': hoverDamageDealt !== null && hoverDamageDealt !== damageDealt[t.identifier],
						}"
						@mouseover="onDamageDealtHover(damageDealt[t.identifier])"
						@mouseleave="onDamageDealtUnhover"
					>
						<dex-type-link
							:vg-identifier="versionGroup.identifier"
							:type="t"
						></dex-type-link>
						<span :class="{
							'dex-type__matchup--neutral': damageDealt[t.identifier] === 1,
							'dex-type__matchup--favorable': damageDealt[t.identifier] > 1,
							'dex-type__matchup--unfavorable': 0 < damageDealt[t.identifier] && damageDealt[t.identifier] < 1,
							'dex-type__matchup--no-effect': damageDealt[t.identifier] === 0,
						}">
							<template v-if="damageDealt[t.identifier] === 1">1</template>
							<template v-else-if="damageDealt[t.identifier] === .5">½</template>
							<template v-else>×{{ damageDealt[t.identifier] }}</template>
						</span>
					</li>
				</ul>
			</div>
		</template>

		<template v-if="flags.length > 0">
			<h2 class="dex-section__title">Technical Data</h2>
			<ul class="dex-move__flags">
				<li v-for="flag in flags" :key="flag.identifier"
					:class="{
						'dex-move__flag': true,
						'dex-move__flag--disabled': !flag.has,
					}"
				>
					{{ flag.name }}
					<div v-if="flag.has" class="dex-move__flag-description">{{ flag.description }}</div>
				</li>
			</ul>
		</template>

		<h2 class="dex-section__title">Pokémon</h2>

		<nav class="dex-move__methods-nav">
			<div>{{ move.name }} can be learned in the following ways:</div>
			<ul class="dex-move__method-links">
				<li v-for="method in visibleMethods" :key="method.identifier">
					<a :href="'#via-' + method.identifier" class="dex-link">{{ method.name }}</a>
				</li>
			</ul>
		</nav>

		<div v-if="hasMultipleGens">
			<label>
				<input type="checkbox" v-model="showOtherGens" @click="toggleOtherGens">
				<template v-if="versionGroup.generationId > 1">Show older generation games</template>
				<template v-else>Show other generation games</template>
			</label>
		</div>

		<table class="dex-table dex-table--full-width">
			<tbody is="dex-move-method-pokemons"
				v-for="method in visibleMethods" :key="method.identifier"
				:method="method"
				:version-group="versionGroup"
				:move="move"
				:version-groups="visibleVersionGroups"
				:stats="stats"
				:show-abilities="showAbilities"
			></tbody>
		</table>
	</template>
</div>
{% endverbatim %}
{% endblock %}

{% block scripts %}
	<script src="https://cdn.jsdelivr.net/npm/vue@2.7"></script>
	<script src="/js/dex-breadcrumbs.js"></script>

	<script src="https://cdn.jsdelivr.net/npm/v-tooltip@2.1"></script>
	<script src="/js/dex-type-link.js"></script>
	<script src="/js/dex-move-method-pokemons.js"></script>

	<script src="/js/dex/move.js"></script>
{% endblock %}
